* Queries 19/10/18
** ImageDB passed in via ReaderT - is this the best idea?
** onload functionality for each image before continuing
Do this with an external JS function
** Splitting into library
** Unit tests for framework; how to test graphical stuff?
Will probably want to test functions operating on eDSL/AST to ensure they generate the correct structures
** USE ReaderT monad to capture fill/stroke state!
* Queries 16/10/18
** How to go about choosing a type of FRP
** Trouble with Haskell libraries (GHCjs)
Version hell
** Reflex FRP
* eDSL to represent presentations in Haskell using Functional Reactive Programming
** Design
*** DSL structure
*** Code generation
*** Target HTML/JS platform
**** Responsive design
**** Slides, prezi-style open area?
- Prezi-style open area with slides inside others promotes need for mouse interaction
- However having a "move the camera around" approach to things could open up lots of interesting other options
- "Slides" achieved by simply teleporting camera
- Should definitely have language to eliminate need to place slides
**** Placement of elements on slide
- Using co-ordinates is really horrible for most purposes
** Existing tech
*** reveal.js 
[[https://revealjs.com/#/]]
[[https://github.com/hakimel/reveal.js]]
*** Slideshow: Functional Presentations
http://www.cs.utah.edu/plt/publications/jfp05-ff.pdf
Not THAT relevant, but does some neat stuff (mostly static image composition with no reactive programming)
** Papers / web pages
*** reactive-banana walkthrough https://wiki.haskell.org/FRP_explanation_using_reactive-banana
** Libraries
* Tricky things
** chaining
Need to chain animations into each other, preserving properties set in previous tweens. 
Need some concept of object state at end of each Tween
Need to compare Tween objects to identify which is the same

Idea: accumulate object state through animations - only need to update it at the end of each animation

Idea: take the final object and extract its transforms by unwrapping the layers
Only remove the transform layers and keep everything else exactly the same

What I have: a list of AnimControl -> Content -> Content transforms
What I want: to leave untouched the transforms that aren't modified

Could: 
loop through transforms
remove any that are used - need to extract final value, though!
turn any that are unused into consts
** switching between chained animations
what i have: 
- for each stage of the animation, i have an Animation object that I can render
- a pure *updateAnimation* function which maps the state of an animation over time
- an Event (Animation -> Animation) *updateA'* which can be used to accumulate an animation state over time
  

ultimately want:
- Some concept of the *current* animation
- A single behaviour which I can render that shows the current Animation
- The ability to update the current animation through an event

in some way i gotta impose an order on the animations, so that on the appropriate event it knows how to go to the 'next' step
maybe list of Animations, current is defined by an integer?

want to have a behaviour which contains the current animation
then switch to update and render that animation


idea
make an accum function for each animation
the tick event only updates them when it's told to
also ability to reset animations


*SOLUTION*
- animationIndex behaviour that changes with clicks
- have a updateIfActive event that only updates the anim when animationIndex equals that animation's index 
- for each animation, accumulate with updateIfActive and store in list
- switch to return only currently active animation
- only render that animation

This only works for _one_ animation chain at the moment.
Solutions for multiple objects:
- multiple lists and index values
  - requires passing in separate lists of anims, one for each object
  - *problem* - don't want to run simultaneously!
- ?

ideally specify like this

animation 1
chain 1
animation 2
chain 2
chain 2
chain 1
etc

and each animation happens in the correct order
we render a set of animations rather than just the one

solutions:
make makeAnimation also return a unique key to specify which animation they belong to. then pass that key through chains
this can be used to separate into classes
also accumulate an order number which animations are tagged with through list of *all* animations

then have a separate list of anims for each class.
for each class of anims:
- render/update the *last* animation with an order key *less* than currentIndex
  
alternatively keep all animations in one list
then render+update *one* of each class moving backwards through the list from currentIndex
** switching between slides
Each slide calls generateEvents to get event triggers.
Ideally only do this once.

Could pass in an Inputs on slide creation
Return loop function which just renders and delays as appropriate

How are these functions called?

Ideally want to go 
#+BEGIN_SRC haskell
slideshow (args) $ do
   slide $ do
     animation
     animation
     etc...
   slide [ ]
#+END_SRC

slide IO functions take a list of animations and have ctx, etc hidden
ie what slideshow expects is a list of:
CTX -> ImageDB -> FPS -> Inputs

ie it takes a function and builds up a list of slide IO actions


ok so each slide function should take an Inputs modified to only fire when that slide is active

*NOTE*: we also want to only update the relevant slide! 
*NOTE*: also consider how we want to reset slides

also: how do we advance to the next slide once the end of the current one is reached?
do we fire an event?

render function is a Behaviour IO () - returns a ~loop~ action which encapsulates all the slide's logic
~slide~ function could also return an event that's fired when there are no more animations to render?

list of (render, prevSlide, nextSlide) tuples - one for each slide
NOTE: this will not allow slides to be reset

once we have a list of slides we need an index behaviour
this behaviour should be updated only when the previous or next event of the current slide event fires

jesus christ

ok so for ez syntax:



take a SlideWriter as an argument - that can then be exec'd to give you a list of values.
unless the slide function includes ~Writer~ this then requires a tell statement before every slide def

so slideW returns a WriterT for the entire function to return

idea: change the slide when *any* of the next events fire
next event will only fire on the current slide anyway!

*PROBLEM*: circular dependency!
currentSlideIndex depends on nextE and prevE events 
these events are constructed by the ~slide~ function
this function requires ~Inputs~, except we need to map ~Inputs~ to only fire when ~currentSlideIndex~ is equal
currentSlideIndex -> nextE -> slide -> modifyInputs -> currentSlideIndex

solved this with RecursiveDo.
** Rendering things that don't require a click
*** Background images 
*** Animations that update and render together (maybe groups???)
Could have a group constructor that takes several ~Animation~ 
Group then renders and updates all animations at once
This complicates things a lot

Or a ~skip~ property on Animation which is not set by default and can be turned on?
Then skip it on rendering


Key difference: want animations that happen in sets or rather to simulate a skip
