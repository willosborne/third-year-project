* To do list
** TODO [#A] Copy in custom html/css on first build
Currently it just uses the default index.html which won't include the CSS reset we want.
Expose index.html for user editing?
** DONE Get canvas rendering working
*** DONE Work out how to use getElementById from within haskell
** TODO [#B] Refactor cabal stuff to expose core as a library
** TODO Design of render system [1/4]
*** DONE Design some kind of Picture/Element/Content class to store data about on-screen content
*** TODO Make canvas resize automatically
**** TODO Think about how to scale on-screen content 
*** TODO Write rendering functions to wrap around Canvas [3/7]
**** TODO Text rendering [2/3]
***** DONE basic text rendering w/ css fonts
***** DONE text wrapping
https://www.html5canvastutorials.com/tutorials/html5-canvas-wrap-text-tutorial/
***** TODO bold, italic (et al) rendering
This will be very difficult.
**** TODO [#A] Image rendering [3/6]
***** DONE Image pre-loader
***** DONE Content classes for image
***** TODO Ability to scale and crop image
***** DONE Load from external URL
***** TODO Load from local file
Need to expose simple system for loading these images w/o copying to build directory
***** TODO Stop it crashing when file is missing
**** DONE Line rendering
**** DONE Poly rendering
**** TODO [#C] Spline rendering?
**** DONE [#A] Filled shapes 
Simply define filled versions of all primitives?
Or define a FillStyle control object?

What should defaults be?
- Black stroke, no fill
- Setting fill turns on fill
 
FillColor $ Content -- fill and stroke 
FillColor $ 
FillColor $ StrokeColor $ Content -- fill and stroke
**** TODO [#B] Think about how to keep framework as extensible as possible
*** TODO [#A] Functions to transform and manipulate content
**** DONE Translate
**** DONE Rotate
**** DONE Scale
**** DONE Change fill and line colour
**** TODO Gradient fills
** TODO Event systtem
*** TODO Event type to store incoming events
*** TODO State type to store state of elements 
Each Content is animated as a whole
*** TODO Animation functions
https://github.com/schell/varying this looks great
Animation functions are pure. 
Take control value from 0 to 1

They animate a property of a Content
Takes AnimControl, Content and a property function

AnimControl :: Double - need a better name

these functions simply map one AnimControl onto another.
no function -> linear

lerp :: AnimControl -> AnimControl
lerp = id
sine :: AnimControl -> AnimControl
sine = math.sin

map one double onto another
lerp :: Double -> Double -> AnimControl -> Double

cat :: Content
cat = Image "cat" Original

AnimFunc :: AnimControl -> Content -> Content -> Content
slide t content property = 
*** TODO Problems with event system
*PROBLEM*: the finalizer is called much earlier than it should be causing the event to unregister when it shouldn't.
Weak pointers in threaded Haskell (and GHCJS) are the problem

Events do not have the value passing issue; may be a problem in the hold function

NOTE: framerate-independent rendering occurs as a side-effect.
*** render system notes
Need a way of specifying tweens easily
** TODO move render functionality to typeclass to allow for extensibility
** TODO Local image store
Ensure images and other resources are bundled alongside the webpage and js code.
